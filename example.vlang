{
  scl x;
  scl y;
  scl i;
  vec v1{6};
  vec v2{6};
  vec v3{6};

  x = 2;
  v1 = 2 * x;             // [4, 4, 4, 4, 4, 4]
  v2 = [1, 1, 2, 2, 3, 3];
  print "V1<dot>V2": v1 @ v2;   // 48

  y = v2:4;               // y = 3
  i = 0;
  loop y {
    v1:i = i;
    i = i + 1;
  }
  print "v1 is": v1;      // [0, 1, 2, 4, 4, 4]
  print "v2 indexed": v2:v1;  // [1, 1, 2, 3, 3, 3]
  print "that reversed": v2:v1:[5,4,3,2,1,0];  // [3, 3, 3, 2, 1, 1]

  v3 = v1 + v2;           // [1, 2, 4, 6, 7, 7]
  print "": v2:([2,1,0,2,2,0] @ v3 / 10);  // 2

  vec a{3};
  a = [10, 0, 20];
  i = 0;
  loop 3 {
    if a @ [1, 0, 0] {
      print "Rotate": i, a;   // Rotate: 0 [10, 0, 20] then Rotate: 1 [20, 10, 0]
      a = a:[2, 0, 1];
    }
    i = i + 1;
  }

  vec z{4};
  z = 10;                       // [10, 10, 10, 10]
  z = (z + [2, 4, 6, 8]) / 2;   // [6, 7, 8, 9]
  z = z - 3 + [2, 3, 4, 5];     // [5, 7, 9, 11]
  print "z is": z;
  print "z summed": z @ [1, 1, 1, 1];  // 32
}
